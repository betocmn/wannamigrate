from html.parser import HTMLParser
from html.entities import name2codepoint
import re


class WMEditorParser( HTMLParser ):
    """ This class handles the content generated by the wm_editor (Rich Text Editor) and provides
        validation, cleaning, etc. """

    # The parsing result (excluding tags which isn't in the whitelist)
    result = ""
    # A list of available tags.
    whitelist = [ "p", "b", "h1", "i", "br", "div", "u", "ol", "ul", "li", "a", "blockquote" ]
    # Counts the number of invalid tags found.
    n_invalid_tags = 0
    # Counts the number of data processed
    n_data = 0

    invalid_tag_opened = False

    def __init__( self, *args, **kwargs ):
        super( WMEditorParser, self ).__init__( *args, **kwargs )

    def handle_starttag( self, tag, attrs ):
        self.invalid_tag_opened = False

        if tag in self.whitelist:
            self.result += '<' + tag 
            for attr in attrs:
                self.result += attr.name + '="' + attr.value + '"'
            self.result += '>'
        else:
            self.invalid_tag_opened = True
            self.n_invalid_tags += 1
    

    def handle_endtag( self, tag ):
        if tag in self.whitelist:
            self.result += '<' + tag + '/>'
    
    
    def handle_data( self, data ):
        if not self.invalid_tag_opened:
            self.result += data
            self.n_data += 1
    
    def handle_comment(self, data):
        pass
    
    def handle_entityref(self, name):
        pass
    
    def handle_charref(self, name):
        pass
    
    def handle_decl(self, data):
        pass

    def cleaned_data( self ):
        """
            Returns the data parsed by this object, removing 
            tags that are not in the whitelist and trailing <br>
        """
        # Removes the trailing br's from the result string then returns.
        self.result = re.sub( '<br>(</br>)?$' , '', self.result )
        return self.result

    def is_valid( self ):
        """
            Verifies if the html parsed is valid
        """
        return ( self.n_invalid_tags == 0 )

    def is_empty( self ):
        return ( self.n_data == 0 )